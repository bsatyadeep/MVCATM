@using Newtonsoft.Json
@model IEnumerable<AutomatedTellerMachine.Models.Transaction>

@{
    ViewBag.Title = "Statement";
}

<h2>Statement</h2>
<table class="table table-striped table-bordered">
    <thead>
    <tr>
        <td><strong>Transaction ID</strong></td>
        <td><strong>Amount</strong></td>
    </tr>
    </thead>
    <tbody data-bind="foreach:CurrentTransactions">
    <tr>
        <td data-bind="text:Id"></td>
        <td data-bind="text:FormattedPrice(Amount)"></td>
    </tr>
    </tbody>
    <tfoot>
    <tr>
        <td colspan="2">
            <span class="glyphicon glyphicon-circle-arrow-left" style="cursor: pointer;" data-bind="click:previousPage,visible:CurrentPage() > 1"></span>
            <span data-bind="text:CurrentPage"></span>
            <span class="glyphicon glyphicon-circle-arrow-right" style="cursor: pointer;" data-bind="click:nextPage, visible:CurrentPage() < lastPage"></span>
        </td>
    </tr>
    </tfoot>
</table>
<script src="~/Scripts/knockout-3.4.0.js"></script>
<script>
    function FormattedPrice(amount) {
        var price = amount.toFixed(2);
        return price;
    }

    function StatementViewModel() {
        var self = this; //self.Transactions = []; // as JSON Array    ko.observableArray([])        
        self.Transactions = @Html.Raw(JsonConvert.SerializeObject(Model,new JsonSerializerSettings {ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));
        self.PageSize = 5;
        self.CurrentPage = ko.observable(1);
        self.lastPage = Math.ceil(self.Transactions.length / self.PageSize);
        self.CurrentTransactions = ko.computed(function() {
            var startIndex = (self.CurrentPage() - 1) * self.PageSize;
            var endIndex = startIndex + self.PageSize;
            return self.Transactions.slice(startIndex, endIndex);
        });
        self.nextPage = function() {
            self.CurrentPage(self.CurrentPage() + 1);
        }
        self.previousPage = function() {
            self.CurrentPage(self.CurrentPage() - 1);
        };
    };

    ko.applyBindings(new StatementViewModel());
</script>